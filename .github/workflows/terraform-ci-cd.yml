name: Terraform CI/CD Pipeline

# Defines actions to perform on push and pull requests
on:
  push:
    branches:
      # For new feature branches
      - "feature/*"
      # For bug fix branches
      - "fix/*"
      # For security patches
      - "security/*"
      # For main branch
      - "main/*"
  pull_request:
    branches:
      - dev
      - staging
      - prod
      - main

# Defines the jobs to perform
jobs:
  format-validate-lint:
    # Latest available ubuntu system
    runs-on: ubuntu-latest
    # Steps to perform (linting, init, formatting, validating etc.)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        run: terraform init

      - name: Format Check
        run: terraform fmt -check -recursive

      - name: Validate
        run: terraform validate

      - name: TFLint
        uses: terraform-linters/setup-tflint@v1
        with:
          version: latest

      - name: Run TFLint
        run: tflint

      - name: Install tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install.sh | bash

      - name: Run tfsec Security Scan
        run: tfsec --soft-fail
        continue-on-error: true
  
  # Actions to perform for non-prod env (init, plan, merge)
  plan:
    if: github.event_name == 'pull_request' && github.base_ref != 'prod'
    runs-on: ubuntu-latest
    needs: format-validate-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.RG_NAME }}" \
                         -backend-config="storage_account_name=${{ secrets.SA_NAME }}" \
                         -backend-config="container_name=tfstate" \
                         -backend-config="key=deployments/${{ github.event.pull_request.head.ref }}.tfstate"

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars.${{ github.event.pull_request.base.ref }}"

  # Actions to perform for prod env (init, plan, merge pending approval)
  apply:
    if: github.event_name == 'push' && github.ref != 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.RG_NAME }}" \
                         -backend-config="storage_account_name=${{ secrets.SA_NAME }}" \
                         -backend-config="container_name=tfstate" \
                         -backend-config="key=deployments/${{ github.ref }}.tfstate"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="terraform.tfvars.${{ github.ref }}"

  # Actions to apply the build to prod-env (init, plan, merge pending approval)
  apply-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs: plan
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets.RG_NAME }}" \
                         -backend-config="storage_account_name=${{ secrets.SA_NAME }}" \
                         -backend-config="container_name=tfstate" \
                         -backend-config="key=deployments/prod.tfstate"

      - name: Terraform Apply with Approval
        id: apply
        run: terraform apply -var-file="terraform.tfvars.prod"

      # Sets it to pending manual approvl
      - name: Request Manual Approval
        if: github.event.pull_request.base.ref == 'prod'
        uses: hmarr/auto-approve-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          APPROVER: ${{ secrets.PROD_APPROVER }}
